import os
import cv2
import numpy as np
from tqdm import tqdm
from insightface.app import FaceAnalysis

# === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î threshold ===
COSINE_SIM_THRESHOLD = 0.7  # ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô (‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: 0.5 ‚Äì 0.8)

# === ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• antelopev2 ===
face_app = FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])
face_app.prepare(ctx_id=0)

def cosine_similarity(a, b):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì cosine similarity ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå 2 ‡∏ï‡∏±‡∏ß"""
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

def get_main_face_embedding(image_path):
    """‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô embedding ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î)"""
    img = cv2.imread(image_path)
    if img is None:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {image_path}")
        return None

    faces = face_app.get(img)
    if not faces:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û: {image_path}")
        return None

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    main_face = max(faces, key=lambda f: (f.bbox[2] - f.bbox[0]) * (f.bbox[3] - f.bbox[1]))
    return main_face.embedding

def find_most_similar_face(user_image_path, folder_path):
    """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
    user_embedding = get_main_face_embedding(user_image_path)
    if user_embedding is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        return None

    best_score = -1.0
    best_image = None

    for fname in tqdm(os.listdir(folder_path), desc="üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"):
        image_path = os.path.join(folder_path, fname)
        target_embedding = get_main_face_embedding(image_path)
        if target_embedding is None:
            continue

        score = cosine_similarity(user_embedding, target_embedding)
        if score > best_score:
            best_score = score
            best_image = image_path

    if best_score >= COSINE_SIM_THRESHOLD:
        print(f"‚úÖ ‡πÄ‡∏à‡∏≠‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {best_image} (similarity: {best_score:.4f})")
        return best_image
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (similarity ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î = {best_score:.4f})")
        return None

# === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ===
if __name__ == "__main__":
    user_image = "piano2.jpg"         # ‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    image_folder = "images_from_drive"      # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    match = find_most_similar_face(user_image, image_folder)
    if match:
        print("üì∏ ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠:", match)
